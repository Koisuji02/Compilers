
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\006\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\003\000\002\010" +
    "\005\000\002\007\005\000\002\012\003\000\002\012\003" +
    "\000\002\014\003\000\002\014\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\016\004\006\005\012\006\010\007\004\020" +
    "\022\023\005\001\002\000\016\004\006\005\032\006\031" +
    "\007\004\020\022\023\005\001\002\000\016\004\006\005" +
    "\032\006\031\007\004\020\022\023\005\001\002\000\030" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\024\uffe3\001\002\000\030" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\021\uffe6\022\uffe6\024\uffe6\001\002\000\022" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\074\015\uffe1\016" +
    "\uffe1\017\uffe1\001\002\000\030\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef\022" +
    "\uffef\024\uffef\001\002\000\022\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\072\014\uffe2\016\uffe2\017\uffe2\001\002\000" +
    "\020\007\047\010\045\011\046\012\051\014\050\016\ufff7" +
    "\017\ufff7\001\002\000\020\007\037\010\035\011\036\012" +
    "\040\015\042\016\ufff8\017\ufff8\001\002\000\004\002\071" +
    "\001\002\000\006\016\ufffc\017\ufffc\001\002\000\006\016" +
    "\ufffb\017\ufffb\001\002\000\006\016\ufff9\017\ufff9\001\002" +
    "\000\006\016\ufffa\017\ufffa\001\002\000\016\004\006\005" +
    "\032\006\031\007\004\020\022\023\005\001\002\000\006" +
    "\016\025\017\026\001\002\000\006\016\ufffd\017\ufffd\001" +
    "\002\000\020\004\006\005\012\006\010\007\004\017\027" +
    "\020\022\023\005\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002\000\006\016\ufffe\017\ufffe\001\002" +
    "\000\030\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\024\uffe1\001\002" +
    "\000\030\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\024\uffe2\001\002" +
    "\000\016\007\047\010\045\011\046\012\051\014\050\022" +
    "\066\001\002\000\016\007\037\010\035\011\036\012\040" +
    "\015\042\021\041\001\002\000\016\004\006\005\032\006" +
    "\031\007\004\020\022\023\005\001\002\000\016\004\006" +
    "\005\032\006\031\007\004\020\022\023\005\001\002\000" +
    "\016\004\006\005\032\006\031\007\004\020\022\023\005" +
    "\001\002\000\016\004\006\005\032\006\031\007\004\020" +
    "\022\023\005\001\002\000\030\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022" +
    "\ufff0\024\ufff0\001\002\000\016\004\006\005\032\006\031" +
    "\007\004\020\022\023\005\001\002\000\014\007\047\010" +
    "\045\011\046\012\051\014\050\001\002\000\030\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\024\uffe7\001\002\000\016\004\006" +
    "\005\032\006\031\007\004\020\022\023\005\001\002\000" +
    "\016\004\006\005\032\006\031\007\004\020\022\023\005" +
    "\001\002\000\016\004\006\005\032\006\031\007\004\020" +
    "\022\023\005\001\002\000\016\004\006\005\032\006\031" +
    "\007\004\020\022\023\005\001\002\000\016\004\006\005" +
    "\032\006\031\007\004\020\022\023\005\001\002\000\030" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\050\015\uffeb\016" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\024\uffeb\001\002\000\030" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\021\ufff3\022\ufff3\024\ufff3\001\002\000\030" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\024\uffe9\001\002\000\014" +
    "\007\037\010\035\011\036\012\040\015\042\001\002\000" +
    "\030\007\uffed\010\uffed\011\046\012\051\014\050\015\uffed" +
    "\016\uffed\017\uffed\021\uffed\022\uffed\024\uffed\001\002\000" +
    "\030\007\uffec\010\uffec\011\uffec\012\uffec\014\050\015\uffec" +
    "\016\uffec\017\uffec\021\uffec\022\uffec\024\uffec\001\002\000" +
    "\030\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\021\ufff4\022\ufff4\024\ufff4\001\002\000" +
    "\030\007\uffee\010\uffee\011\046\012\051\014\050\015\uffee" +
    "\016\uffee\017\uffee\021\uffee\022\uffee\024\uffee\001\002\000" +
    "\030\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\050\015\ufff1" +
    "\016\ufff1\017\ufff1\021\ufff1\022\ufff1\024\ufff1\001\002\000" +
    "\030\007\ufff5\010\ufff5\011\036\012\040\014\ufff5\015\042" +
    "\016\ufff5\017\ufff5\021\ufff5\022\ufff5\024\ufff5\001\002\000" +
    "\030\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\050\015\ufff2" +
    "\016\ufff2\017\ufff2\021\ufff2\022\ufff2\024\ufff2\001\002\000" +
    "\030\007\ufff6\010\ufff6\011\036\012\040\014\ufff6\015\042" +
    "\016\ufff6\017\ufff6\021\ufff6\022\ufff6\024\ufff6\001\002\000" +
    "\016\004\006\005\032\006\031\007\004\020\022\023\005" +
    "\001\002\000\016\007\047\010\045\011\046\012\051\014" +
    "\050\021\070\001\002\000\030\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\001\002\000\004\002\001\001\002\000\016" +
    "\004\006\005\032\006\031\007\004\020\022\023\005\001" +
    "\002\000\020\007\047\010\045\011\046\012\051\014\050" +
    "\016\uffe5\017\uffe5\001\002\000\016\004\006\005\032\006" +
    "\031\007\004\020\022\023\005\001\002\000\020\007\037" +
    "\010\035\011\036\012\040\015\042\016\uffe4\017\uffe4\001" +
    "\002\000\016\007\047\010\045\011\046\012\051\014\050" +
    "\024\077\001\002\000\030\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\024\uffe8\001\002\000\030\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea" +
    "\024\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\030\002\014\003\022\004\023\005\020\006" +
    "\017\007\016\010\015\011\012\012\006\013\013\014\010" +
    "\001\001\000\012\011\077\012\006\013\054\014\010\001" +
    "\001\000\012\011\075\012\006\013\054\014\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\032" +
    "\012\006\013\033\014\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\027\005\020\006\017\007\016" +
    "\010\015\011\012\012\006\013\013\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\042\012\006\013\064\014\010\001\001" +
    "\000\012\011\063\012\006\013\054\014\010\001\001\000" +
    "\012\011\042\012\006\013\062\014\010\001\001\000\012" +
    "\011\061\012\006\013\054\014\010\001\001\000\002\001" +
    "\001\000\012\011\042\012\006\013\043\014\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\060\012" +
    "\006\013\054\014\010\001\001\000\012\011\056\012\006" +
    "\013\057\014\010\001\001\000\012\011\055\012\006\013" +
    "\054\014\010\001\001\000\012\011\053\012\006\013\054" +
    "\014\010\001\001\000\012\011\051\012\006\013\052\014" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\066\012\006\013\054\014\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\072\012\006\013\054\014\010\001\001\000\002\001\001" +
    "\000\012\011\042\012\006\013\074\014\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTable = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap symbolTable;

    public void report_error(String message, Object info){
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol){
            if (((Symbol)info).left != -1){
                int line = ((Symbol)info).left + 1;
                int column = ((Symbol)info).right + 1;
                System.err.print(" (linea " + line + ", colonna " + column + "): " + message);
            } else {
                System.err.print(": " + message);
            }
        } else {
            System.err.print(": " + message);
        }
    }

    public void syntax_error(Symbol s){
        report_error("Syntax error", s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= row_list INT 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;
		 System.out.println("Fine"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= row_list SEM INT 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;
		 System.out.println("Fine"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // row_list ::= row_list SEM row 
            { parser.Tree.reduce(3,"row_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // row_list ::= row 
            { parser.Tree.reduce(1,"row_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // row ::= scalar_assign 
            { parser.Tree.reduce(1,"row",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // row ::= vector_assign 
            { parser.Tree.reduce(1,"row",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // row ::= vector_cont 
            { parser.Tree.reduce(1,"row",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // row ::= scalar_cont 
            { parser.Tree.reduce(1,"row",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("row",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vector_cont ::= vector_expr 
            { parser.Tree.reduce(1,"vector_cont",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] e = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("vector expression: [" +e[0]+ "," +e[1]+ "]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_cont",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scalar_cont ::= scalar_expr 
            { parser.Tree.reduce(1,"scalar_cont",0);
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("scalar expression:" + e);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_cont",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vector_expr ::= vector_expr PLUS vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] + b[0]);
                    RESULT[1] = new Double(a[1] + b[1]);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vector_expr ::= vector_expr MINUS vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] - b[0]);
                    RESULT[1] = new Double(a[1] - b[1]);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector_expr ::= scalar_expr PROD vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a * b[0]);
                    RESULT[1] = new Double(a * b[1]);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vector_expr ::= scalar_expr DIV vector_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a / b[0]);
                    RESULT[1] = new Double(a / b[1]);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vector_expr ::= vector_expr PROD scalar_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] * b);
                    RESULT[1] = new Double(a[1] * b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vector_expr ::= vector_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] / b);
                    RESULT[1] = new Double(a[1] / b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vector_expr ::= SO vector_expr SC 
            { parser.Tree.reduce(3,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vector_expr ::= vector 
            { parser.Tree.reduce(1,"vector_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scalar_expr ::= scalar_expr PLUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(a + b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scalar_expr ::= scalar_expr MINUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(a - b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // scalar_expr ::= scalar_expr PROD scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(a * b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // scalar_expr ::= scalar_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(a / b);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // scalar_expr ::= MINUS scalar_expr 
            { parser.Tree.reduce(2,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(-a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scalar_expr ::= scalar_expr EXP scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(Math.pow(a,b));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scalar_expr ::= RO scalar_expr RC 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scalar_expr ::= vector_expr DOT vector_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Double(a[0] * b[0] + a[1] * b[1]);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // scalar_expr ::= scalar 
            { parser.Tree.reduce(1,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scalar_assign ::= LOW EQ scalar_expr 
            { parser.Tree.reduce(3,"scalar_assign",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.symbolTable.put(a,b);
            System.out.println("assignment: "+ b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vector_assign ::= UPP EQ vector_expr 
            { parser.Tree.reduce(3,"vector_assign",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.symbolTable.put(a,b);
            System.out.println("assignment: ["+ b[0] + "," + b[1] + "]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector_assign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // scalar ::= NUM 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // scalar ::= LOW 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Double)parser.symbolTable.get(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vector ::= UPP 
            { parser.Tree.reduce(1,"vector",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Double[]) parser.symbolTable.get(a);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vector ::= SO scalar_expr COM scalar_expr SC 
            { parser.Tree.reduce(5,"vector",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = new Double[2];
            RESULT[0] = a;
            RESULT[1] = b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
