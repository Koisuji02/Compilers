import java_cup.runtime.*;
import java.util.*;

init with {:
    symbolTable = new HashMap();
:};

parser code {:
    public HashMap symbolTable;

    public void report_error(String message, Object info){
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol){
            if (((Symbol)info).left != -1){
                int line = ((Symbol)info).left + 1;
                int column = ((Symbol)info).right + 1;
                System.err.print(" (linea " + line + ", colonna " + column + "): " + message);
            } else {
                System.err.print(": " + message);
            }
        } else {
            System.err.print(": " + message);
        }
    }

    public void syntax_error(Symbol s){
        report_error("Syntax error", s);
    }
:};

// TERMINAL SYMBOLS
terminal Double NUM;
terminal Character LOW, UPP;
terminal MINUS, PLUS, PROD, DIV, EQ, EXP, DOT, SEM, INT, SO, SC, COM, RO, RC;

terminal UMINUS;

// NON-TERMINAL SYMBOLS
non terminal Object prog, row_list, row, vector_cont, scalar_cont, vector_assign, scalar_assign;
non terminal Double scalar_expr, scalar;
non terminal Double[] vector_expr, vector;


// PRECEDENCE
precedence left MINUS, PLUS;
precedence left DIV, PROD, DOT;
precedence left EXP;
precedence left UMINUS;


// GRAMMAR

//!!!!! SE NON FUNZIONE AGGIUNGI OVUNQUE .doubleValue()

// CONTAINERS
start with prog;

prog ::= row_list INT {: System.out.println("Fine"); :}
       | row_list SEM INT {: System.out.println("Fine"); :}
;


row_list ::= row_list SEM row | row
;

row ::= scalar_assign | vector_assign | vector_cont | scalar_cont
;

vector_cont ::= vector_expr:e {:
        System.out.println("vector expression: [" +e[0]+ "," +e[1]+ "]");
:}
;

scalar_cont ::= scalar_expr:e {:
        System.out.println("scalar expression:" + e);
:}
;

// VECTOR EXPRESSIONS
vector_expr ::= vector_expr:a PLUS vector_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] + b[0]);
                    RESULT[1] = new Double(a[1] + b[1]);
            :}
            | vector_expr:a MINUS vector_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] - b[0]);
                    RESULT[1] = new Double(a[1] - b[1]);
            :}
            | scalar_expr:a PROD vector_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a * b[0]);
                    RESULT[1] = new Double(a * b[1]);
            :}
            | scalar_expr:a DIV vector_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a / b[0]);
                    RESULT[1] = new Double(a / b[1]);
            :}
            | vector_expr:a PROD scalar_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] * b);
                    RESULT[1] = new Double(a[1] * b);
            :}
            | vector_expr:a DIV scalar_expr:b {:
                    RESULT = new Double[2];
                    RESULT[0] = new Double(a[0] / b);
                    RESULT[1] = new Double(a[1] / b);
            :}
            | SO vector_expr:a SC {: RESULT = a; :}
            | vector:a {: RESULT = a; :}
;

// SCALAR EXPRESSIONS
scalar_expr ::= scalar_expr:a PLUS scalar_expr:b {:
                    RESULT = new Double(a + b);
            :}
            | scalar_expr:a MINUS scalar_expr:b {:
                    RESULT = new Double(a - b);
            :}
            | scalar_expr:a PROD scalar_expr:b {:
                    RESULT = new Double(a * b);
            :}
            | scalar_expr:a DIV scalar_expr:b {:
                    RESULT = new Double(a / b);
            :}
            | MINUS scalar_expr:a {:
                    RESULT = new Double(-a);
            :} %prec UMINUS
            | scalar_expr:a EXP scalar_expr:b {:
                    RESULT = new Double(Math.pow(a,b));
            :}
            | RO scalar_expr:a RC {: RESULT = a; :}
            | vector_expr:a DOT vector_expr:b {:
                    RESULT = new Double(a[0] * b[0] + a[1] * b[1]);
            :}
            | scalar:a {: RESULT = a; :}
;

// ASSIGNMENTS (solo qui inserisco nella symbolTable)
scalar_assign ::= LOW:a EQ scalar_expr:b {:
            parser.symbolTable.put(a,b);
            System.out.println("assignment: "+ b);
:}
;

vector_assign ::= UPP:a EQ vector_expr:b {:
            parser.symbolTable.put(a,b);
            System.out.println("assignment: ["+ b[0] + "," + b[1] + "]");
:}
;

scalar ::= NUM:a {: RESULT = a; :}
        | LOW:a {: RESULT = (Double)parser.symbolTable.get(a); :}
;

vector ::= UPP:a {: 
            RESULT = (Double[]) parser.symbolTable.get(a);
        :}
        | SO scalar_expr:a COM scalar_expr:b SC {:
            RESULT = new Double[2];
            RESULT[0] = a;
            RESULT[1] = b;
        :}
;
