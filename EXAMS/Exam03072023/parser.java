
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\004\000\002\006\004\000\002\006\003\000\002" +
    "\004\005\000\002\004\004\000\002\007\007\000\002\011" +
    "\005\000\002\011\003\000\002\010\004\000\002\005\003" +
    "\000\002\012\004\000\002\012\002\000\002\013\007\000" +
    "\002\020\004\000\002\020\007\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\014\003\000\002\014" +
    "\003\000\002\017\005\000\002\016\004\000\002\016\003" +
    "\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\022\007\023\006\024\004\001\002\000" +
    "\012\021\ufff6\022\ufff6\023\ufff6\024\ufff6\001\002\000\010" +
    "\022\105\023\104\024\076\001\002\000\006\022\101\024" +
    "\004\001\002\000\006\023\074\024\004\001\002\000\004" +
    "\002\072\001\002\000\004\021\012\001\002\000\004\006" +
    "\014\001\002\000\006\006\014\021\030\001\002\000\004" +
    "\030\017\001\002\000\004\006\014\001\002\000\006\006" +
    "\ufff4\021\ufff4\001\002\000\004\007\020\001\002\000\004" +
    "\030\021\001\002\000\004\033\027\001\002\000\006\005" +
    "\024\010\025\001\002\000\006\005\ufff1\010\ufff1\001\002" +
    "\000\004\030\021\001\002\000\006\006\ufff3\021\ufff3\001" +
    "\002\000\006\005\ufff2\010\ufff2\001\002\000\006\005\ufff0" +
    "\010\ufff0\001\002\000\006\002\uffed\011\uffed\001\002\000" +
    "\004\006\014\001\002\000\006\006\ufff5\021\ufff5\001\002" +
    "\000\004\002\000\001\002\000\006\002\uffef\011\036\001" +
    "\002\000\006\002\uffee\011\uffee\001\002\000\010\014\041" +
    "\025\043\030\040\001\002\000\010\012\062\031\051\032" +
    "\052\001\002\000\004\027\060\001\002\000\010\014\041" +
    "\025\043\030\040\001\002\000\010\012\uffe8\031\uffe8\032" +
    "\uffe8\001\002\000\010\014\041\025\043\030\040\001\002" +
    "\000\004\015\045\001\002\000\004\033\046\001\002\000" +
    "\012\012\uffe7\026\uffe7\031\uffe7\032\uffe7\001\002\000\006" +
    "\031\051\032\052\001\002\000\004\030\040\001\002\000" +
    "\004\030\uffe6\001\002\000\004\030\uffe5\001\002\000\010" +
    "\026\054\031\uffe9\032\uffe9\001\002\000\010\012\uffea\031" +
    "\uffea\032\uffea\001\002\000\010\012\uffeb\031\uffeb\032\uffeb" +
    "\001\002\000\004\030\040\001\002\000\010\012\uffe9\031" +
    "\uffe9\032\uffe9\001\002\000\004\030\061\001\002\000\004" +
    "\015\uffe4\001\002\000\004\020\065\001\002\000\006\013" +
    "\070\020\065\001\002\000\006\013\uffe2\020\uffe2\001\002" +
    "\000\004\030\066\001\002\000\004\004\067\001\002\000" +
    "\006\013\uffe1\020\uffe1\001\002\000\006\002\uffec\011\uffec" +
    "\001\002\000\006\013\uffe3\020\uffe3\001\002\000\004\002" +
    "\001\001\002\000\006\023\077\024\076\001\002\000\006" +
    "\021\ufff9\024\004\001\002\000\006\021\uffff\024\076\001" +
    "\002\000\012\021\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002" +
    "\000\004\021\ufffe\001\002\000\006\022\103\024\076\001" +
    "\002\000\006\021\ufff8\024\004\001\002\000\006\021\ufffd" +
    "\024\076\001\002\000\004\021\ufffc\001\002\000\004\022" +
    "\107\001\002\000\004\023\106\001\002\000\004\021\ufffb" +
    "\001\002\000\004\021\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\010\002\007\003\010\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\077\001\001" +
    "\000\004\006\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\012\007\014\001\001\000\004\007\030" +
    "\001\001\000\002\001\001\000\004\007\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\022\011\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\032\012\033\001" +
    "\001\000\004\007\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\034\001\001\000\002\001\001\000" +
    "\010\017\043\020\036\021\041\001\001\000\004\014\055" +
    "\001\001\000\002\001\001\000\010\017\043\020\054\021" +
    "\041\001\001\000\002\001\001\000\010\017\043\020\046" +
    "\021\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\047\001\001\000\006\017\043" +
    "\021\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\055\001\001" +
    "\000\006\017\043\021\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\063\016\062" +
    "\001\001\000\004\015\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    map = new HashMap<String, ArrayList<Room>>();


 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Room>> map = new HashMap<String, ArrayList<Room>>();

    class Room{
        private String name;
        private Integer size;

        // costruttore
        Room(String name, Integer size){
            this.name = name;
            this.size = size;
        }

        String getName(){
            return this.name;
        }

        Integer getSize(){
            return this.size;
        }
    }

    // ERROR FUNCTION
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

    // ritorna il valore del simbolo alla posizione = pos (dello stack)
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    public Boolean check(String[] s, Integer size){
        ArrayList<Room> rooms = map.get(s[0]);
        for (Room r: rooms) {
            if (s[1].equals(r.getName())){
                if (size == r.getSize()){
                    return true;
                }
            }
        }
        return false;
    }

    public Boolean compute(Boolean s1, String o, Boolean s2){
        if (o.equals("AND")){
            return (s1 && s2);
        }
        if (o.equals("OR")){
            return (s1 || s2);
        }
        return false;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP houses SEP preferences 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK1 TOK2 tok3_empty 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TOK1 tok3_empty TOK2 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= TOK2 TOK1 tok3_empty 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= TOK2 tok3_empty TOK1 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tok3_empty TOK1 TOK2 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok3_empty TOK2 TOK1 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= TOK1 TOK2 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= TOK2 TOK1 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok3_empty ::= tok3_empty TOK3 
            { parser.Tree.reduce(2,"tok3_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3_empty",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok3_empty ::= TOK3 
            { parser.Tree.reduce(1,"tok3_empty",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3_empty",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // houses ::= houses house house 
            { parser.Tree.reduce(3,"houses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // houses ::= house house 
            { parser.Tree.reduce(2,"houses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("houses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // house ::= HOUSE STRING START room_list END 
            { parser.Tree.reduce(5,"house",0);
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Room> list = (ArrayList<Room>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(type, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("house",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // room_list ::= room_list CM room 
            { parser.Tree.reduce(3,"room_list",0);
              ArrayList<Room> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Room> list = (ArrayList<Room>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Room r = (Room)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(r);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // room_list ::= room 
            { parser.Tree.reduce(1,"room_list",0);
              ArrayList<Room> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Room r = (Room)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Room> list = new ArrayList();
    list.add(r);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // room ::= STRING SIZE 
            { parser.Tree.reduce(2,"room",0);
              Room RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Room r = new Room(name, size);
    RESULT = r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("room",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // preferences ::= if_list 
            { parser.Tree.reduce(1,"preferences",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("preferences",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if_list ::= if_list if 
            { parser.Tree.reduce(2,"if_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_list ::= 
            { parser.Tree.reduce(0,"if_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if ::= IF bool_exp THEN print_list FI 
            { parser.Tree.reduce(5,"if",0);
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(s1){
            for (String s: list){
                System.out.println("\""+ s +"\"");
            }
        }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_exp ::= NOT bool_exp 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean result = !s1;
        RESULT = result;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_exp ::= RO bool_exp operator statement RC 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean s2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Boolean result = parser.compute((Boolean) s1, (String) o, (Boolean) s2);
        RESULT = result;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_exp ::= bool_exp operator statement 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean s1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean result = parser.compute((Boolean) s1, (String) o, (Boolean) s2);
        RESULT = result;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_exp ::= statement 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= room_ref EQ SIZE 
            { parser.Tree.reduce(3,"statement",0);
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String[] s = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Boolean result = parser.check(s, size);
        RESULT = result;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operator ::= AND 
            { parser.Tree.reduce(1,"operator",0);
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operator ::= OR 
            { parser.Tree.reduce(1,"operator",0);
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = o;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operator",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // room_ref ::= STRING DOT STRING 
            { parser.Tree.reduce(3,"room_ref",0);
              String[] RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int room_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int room_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String room_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String[] tmp = new String[2];
        tmp[0] = type;
        tmp[1] = room_name;
        RESULT = tmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("room_ref",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // print_list ::= print_list print 
            { parser.Tree.reduce(2,"print_list",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // print_list ::= print 
            { parser.Tree.reduce(1,"print_list",0);
              ArrayList<String> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<String> list = new ArrayList();
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // print ::= PRINT STRING SC 
            { parser.Tree.reduce(3,"print",0);
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
