// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\2\0\1\6\4\0\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\23\1\0\1\24\5\0\2\25\4\26\21\27"+
    "\1\30\1\31\1\27\6\0\2\25\2\26\1\32\1\26"+
    "\10\27\1\33\2\27\1\34\2\27\1\35\5\27\1\36"+
    "\1\0\1\37\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\0\1\2\1\3\1\4\1\5\1\0"+
    "\4\6\1\7\3\0\1\10\1\0\1\1\2\0\5\6"+
    "\3\0\1\11\4\12\1\0\3\6\4\0\2\12\1\6"+
    "\2\0\1\13\1\1\4\0\2\6\3\0\2\6\5\0"+
    "\4\6\3\0\3\6\5\0\3\6\6\0\3\6\2\0"+
    "\1\14\3\0\5\6\1\0\1\15\6\0\5\6\4\0"+
    "\2\6\1\16\2\6\4\0\4\6\3\0\7\6\2\0"+
    "\7\6\2\0\42\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\40\0\200\0\40\0\40"+
    "\0\240\0\300\0\340\0\u0100\0\u0120\0\40\0\u0140\0\u0160"+
    "\0\u0180\0\40\0\u01a0\0\u01c0\0\u01e0\0\u0200\0\u0220\0\u0240"+
    "\0\u0260\0\u0280\0\u02a0\0\u02c0\0\u02e0\0\u0300\0\40\0\u0320"+
    "\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0\0\u03e0\0\u0400\0\u0420"+
    "\0\u0440\0\u0460\0\u0480\0\u03a0\0\u04a0\0\u04c0\0\u04e0\0\u0500"+
    "\0\40\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0\0\u05e0"+
    "\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\u06c0\0\u06e0"+
    "\0\u0700\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0\0\u07c0\0\u07e0"+
    "\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0\0\u08c0\0\u08e0"+
    "\0\u0900\0\u0920\0\u0940\0\u0960\0\u0980\0\u09a0\0\u09c0\0\u09e0"+
    "\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0\0\40"+
    "\0\u0ae0\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0"+
    "\0\u0be0\0\40\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0"+
    "\0\u0cc0\0\u0ce0\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0da0"+
    "\0\u0dc0\0\u0de0\0\u0e00\0\40\0\u0e20\0\u0e40\0\u0e60\0\u0e80"+
    "\0\u0ea0\0\u0ec0\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\u0f80"+
    "\0\u0fa0\0\u0fc0\0\u0fe0\0\u1000\0\u1020\0\u1040\0\u1060\0\u1080"+
    "\0\u10a0\0\u10c0\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160\0\u1180"+
    "\0\u11a0\0\u11c0\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260\0\u1280"+
    "\0\u12a0\0\u12c0\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360\0\u1380"+
    "\0\u13a0\0\u13c0\0\u13e0\0\u1400\0\u1420\0\u1440\0\u1460\0\u1480"+
    "\0\u14a0\0\u14c0\0\u14e0\0\u1500\0\u1520\0\u1540\0\u1560\0\u1580"+
    "\0\u15a0\0\u15c0\0\u15e0\0\u1600\0\u1620";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\14\5\15\1\16"+
    "\2\17\3\0\1\20\3\0\1\21\43\0\1\2\35\0"+
    "\5\4\1\22\32\4\7\0\1\23\43\0\1\24\36\0"+
    "\1\25\1\0\10\26\26\0\1\25\1\0\3\27\5\30"+
    "\26\0\1\25\1\0\5\30\1\31\1\32\1\33\1\0"+
    "\2\34\3\0\1\34\17\0\1\25\1\0\7\32\1\33"+
    "\1\0\2\34\3\0\1\34\30\0\1\34\1\0\2\34"+
    "\3\0\1\34\30\0\1\34\1\0\2\34\3\0\1\34"+
    "\2\0\1\35\40\0\1\36\10\0\1\37\30\0\2\24"+
    "\3\0\33\24\14\0\1\40\1\41\1\42\5\43\26\0"+
    "\1\44\1\0\10\26\26\0\1\25\1\0\10\45\26\0"+
    "\1\25\1\0\10\46\26\0\1\25\1\0\6\46\2\47"+
    "\26\0\1\25\1\0\10\47\26\0\1\25\1\0\10\47"+
    "\1\0\2\50\3\0\1\50\32\0\2\50\3\0\1\50"+
    "\41\0\1\51\3\0\37\36\1\52\12\0\1\53\1\0"+
    "\10\54\26\0\1\53\1\0\10\43\26\0\1\53\1\0"+
    "\5\43\1\55\2\40\26\0\1\53\1\0\10\40\30\0"+
    "\10\54\26\0\1\25\1\0\10\56\1\0\1\57\24\0"+
    "\1\25\1\0\10\56\26\0\1\44\1\0\10\56\23\0"+
    "\1\60\63\0\1\61\4\0\37\36\1\62\14\0\1\63"+
    "\1\64\1\65\5\66\26\0\1\53\1\0\6\40\2\54"+
    "\26\0\1\44\1\0\1\67\7\70\30\0\4\50\45\0"+
    "\11\71\41\0\1\2\12\0\1\72\37\0\1\72\1\0"+
    "\10\66\26\0\1\72\1\0\5\66\1\73\2\63\26\0"+
    "\1\72\1\0\10\63\26\0\1\44\1\0\10\74\26\0"+
    "\1\44\1\0\10\75\41\0\11\76\16\0\1\77\1\100"+
    "\1\101\5\102\26\0\1\72\1\0\6\63\30\0\1\44"+
    "\1\0\1\103\7\104\26\0\1\44\1\0\1\105\7\106"+
    "\41\0\11\107\13\0\1\110\37\0\1\110\2\0\10\102"+
    "\25\0\1\110\2\0\5\102\1\111\2\77\25\0\1\110"+
    "\2\0\10\77\26\0\1\44\1\0\10\103\26\0\1\44"+
    "\1\0\10\112\26\0\1\44\1\0\10\113\26\0\1\44"+
    "\1\0\10\114\41\0\11\115\16\0\1\116\1\117\1\120"+
    "\1\121\31\0\1\110\2\0\6\77\30\0\1\44\1\0"+
    "\10\105\26\0\1\44\1\0\1\122\7\123\26\0\1\44"+
    "\1\0\1\105\7\124\41\0\11\125\17\0\3\126\4\127"+
    "\30\0\10\127\30\0\10\130\30\0\1\131\1\132\34\0"+
    "\1\44\1\0\10\133\26\0\1\44\1\0\10\134\26\0"+
    "\1\44\1\0\10\135\25\0\1\136\13\0\11\115\15\0"+
    "\1\137\10\0\1\140\37\0\1\140\26\0\1\141\10\0"+
    "\1\140\26\0\1\142\37\0\1\143\36\0\1\44\1\0"+
    "\1\103\7\144\26\0\1\44\1\0\1\145\7\146\26\0"+
    "\1\44\1\0\1\147\7\150\23\0\1\151\14\0\1\152"+
    "\4\0\1\153\22\0\1\154\37\0\1\155\37\0\1\156"+
    "\1\157\36\0\1\156\1\160\34\0\1\44\1\0\10\161"+
    "\26\0\1\44\1\0\10\162\26\0\1\44\1\0\10\163"+
    "\26\0\1\44\1\0\10\164\26\0\1\44\1\0\10\165"+
    "\23\0\1\166\60\0\1\167\26\0\1\170\36\0\1\170"+
    "\36\0\1\170\36\0\3\171\35\0\1\171\1\0\1\171"+
    "\33\0\1\44\1\0\10\145\26\0\1\44\1\0\1\172"+
    "\7\173\1\174\25\0\1\44\1\0\1\145\7\175\1\174"+
    "\25\0\1\44\1\0\1\172\7\176\1\174\25\0\1\44"+
    "\1\0\1\145\7\176\1\174\22\0\1\177\60\0\1\153"+
    "\1\200\21\0\1\201\37\0\1\202\36\0\1\44\1\0"+
    "\10\203\26\0\1\44\1\0\10\204\26\0\1\44\1\0"+
    "\10\205\26\0\1\44\1\0\10\206\23\0\1\207\54\0"+
    "\1\152\31\0\1\210\37\0\1\211\33\0\1\44\1\0"+
    "\1\103\7\212\1\174\25\0\1\44\1\0\1\213\7\214"+
    "\1\174\25\0\1\44\1\0\1\215\7\216\1\174\25\0"+
    "\1\44\1\0\1\217\7\220\1\174\22\0\1\177\14\0"+
    "\1\152\27\0\1\221\37\0\1\222\35\0\1\44\1\0"+
    "\10\223\26\0\1\44\1\0\10\224\26\0\1\44\1\0"+
    "\10\225\26\0\1\44\1\0\10\226\26\0\1\44\1\0"+
    "\10\227\26\0\1\44\1\0\10\230\26\0\1\44\1\0"+
    "\10\231\32\0\1\232\37\0\1\233\33\0\1\44\1\0"+
    "\10\213\26\0\1\44\1\0\1\234\7\235\26\0\1\44"+
    "\1\0\1\213\7\236\26\0\1\44\1\0\1\234\7\237"+
    "\1\174\25\0\1\44\1\0\1\213\7\237\1\174\25\0"+
    "\1\44\1\0\1\240\7\241\1\174\25\0\1\44\1\0"+
    "\1\215\7\241\1\174\33\0\1\127\36\0\1\127\32\0"+
    "\1\44\1\0\10\242\26\0\1\44\1\0\10\243\26\0"+
    "\1\44\1\0\10\244\26\0\1\44\1\0\10\245\26\0"+
    "\1\44\1\0\10\246\26\0\1\44\1\0\10\247\26\0"+
    "\1\44\1\0\1\103\7\250\26\0\1\44\1\0\1\251"+
    "\7\252\26\0\1\44\1\0\1\253\7\254\26\0\1\44"+
    "\1\0\1\255\7\256\26\0\1\44\1\0\1\103\7\257"+
    "\1\174\25\0\1\44\1\0\1\255\7\260\1\174\25\0"+
    "\1\44\1\0\10\261\26\0\1\44\1\0\10\262\26\0"+
    "\1\44\1\0\10\263\26\0\1\44\1\0\10\264\26\0"+
    "\1\44\1\0\10\265\26\0\1\44\1\0\10\266\26\0"+
    "\1\44\1\0\10\267\26\0\1\44\1\0\10\270\26\0"+
    "\1\44\1\0\10\271\26\0\1\44\1\0\10\251\26\0"+
    "\1\44\1\0\10\272\1\174\25\0\1\44\1\0\10\251"+
    "\1\174\25\0\1\44\1\0\1\272\7\252\1\174\25\0"+
    "\1\44\1\0\1\251\7\252\1\174\25\0\1\44\1\0"+
    "\1\273\7\254\1\174\25\0\1\44\1\0\1\253\7\254"+
    "\1\174\25\0\1\44\1\0\10\255\26\0\1\44\1\0"+
    "\1\255\7\256\1\174\25\0\1\44\1\0\10\274\26\0"+
    "\1\44\1\0\10\275\26\0\1\44\1\0\10\103\1\174"+
    "\25\0\1\44\1\0\1\103\7\250\1\174\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5696];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\0\1\11\1\1\2\11\1\0"+
    "\4\1\1\11\3\0\1\11\1\0\1\1\2\0\5\1"+
    "\3\0\1\11\4\1\1\0\3\1\4\0\3\1\2\0"+
    "\1\11\1\1\4\0\2\1\3\0\2\1\5\0\4\1"+
    "\3\0\3\1\5\0\3\1\6\0\3\1\2\0\1\11"+
    "\3\0\5\1\1\0\1\11\6\0\5\1\4\0\2\1"+
    "\1\11\2\1\4\0\4\1\3\0\7\1\2\0\7\1"+
    "\2\0\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { ;
            }
            // fall through
          case 15: break;
          case 2:
            { return new Symbol(sym.PERC);
            }
            // fall through
          case 16: break;
          case 3:
            { return new Symbol(sym.STAR);
            }
            // fall through
          case 17: break;
          case 4:
            { return new Symbol(sym.CM);
            }
            // fall through
          case 18: break;
          case 5:
            { return new Symbol(sym.MINUS);
            }
            // fall through
          case 19: break;
          case 6:
            { return new Symbol(sym.INT, new Integer(yytext()));
            }
            // fall through
          case 20: break;
          case 7:
            { return new Symbol(sym.SC);
            }
            // fall through
          case 21: break;
          case 8:
            { return new Symbol(sym.NAME, new String(yytext()));
            }
            // fall through
          case 22: break;
          case 9:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 23: break;
          case 10:
            { return new Symbol(sym.COST, new Double(yytext()));
            }
            // fall through
          case 24: break;
          case 11:
            { return new Symbol(sym.EURO, new String(yytext()));
            }
            // fall through
          case 25: break;
          case 12:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 26: break;
          case 13:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 27: break;
          case 14:
            { return new Symbol(sym.TOK3);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
