
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\003\000\002\006\004\000\002\011\005" +
    "\000\002\011\005\000\002\012\005\000\002\012\013\000" +
    "\002\012\014\000\002\007\005\000\002\013\003\000\002" +
    "\013\002\000\002\014\004\000\002\014\002\000\002\015" +
    "\003\000\002\015\003\000\002\004\005\000\002\004\005" +
    "\000\002\010\006\000\002\017\005\000\002\017\003\000" +
    "\002\016\006\000\002\005\004\000\002\005\003\000\002" +
    "\022\010\000\002\020\005\000\002\020\003\000\002\021" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\006\012\007\013\006\001\002\000\004\011" +
    "\ufffe\001\002\000\004\011\uffff\001\002\000\012\011\ufff5" +
    "\012\ufff5\013\074\014\ufff5\001\002\000\004\012\072\001" +
    "\002\000\004\002\071\001\002\000\006\012\055\013\054" +
    "\001\002\000\004\011\013\001\002\000\004\016\016\001" +
    "\002\000\004\016\016\001\002\000\006\011\031\016\016" +
    "\001\002\000\004\005\017\001\002\000\004\017\022\001" +
    "\002\000\006\006\uffec\007\uffec\001\002\000\006\006\027" +
    "\007\026\001\002\000\004\016\023\001\002\000\004\020" +
    "\024\001\002\000\004\015\025\001\002\000\006\006\uffeb" +
    "\007\uffeb\001\002\000\004\017\022\001\002\000\006\011" +
    "\uffee\016\uffee\001\002\000\006\006\uffed\007\uffed\001\002" +
    "\000\004\016\035\001\002\000\004\016\016\001\002\000" +
    "\006\011\ufff0\016\ufff0\001\002\000\006\002\uffe9\016\uffe9" +
    "\001\002\000\004\017\040\001\002\000\006\002\000\016" +
    "\035\001\002\000\006\002\uffea\016\uffea\001\002\000\004" +
    "\010\041\001\002\000\004\005\042\001\002\000\004\016" +
    "\044\001\002\000\006\006\uffe6\007\uffe6\001\002\000\004" +
    "\017\051\001\002\000\006\006\047\007\046\001\002\000" +
    "\004\016\044\001\002\000\006\002\uffe8\016\uffe8\001\002" +
    "\000\006\006\uffe7\007\uffe7\001\002\000\006\006\uffe5\007" +
    "\uffe5\001\002\000\004\016\016\001\002\000\006\011\uffef" +
    "\016\uffef\001\002\000\004\013\060\001\002\000\004\012" +
    "\057\001\002\000\004\011\ufffd\001\002\000\006\012\ufffb" +
    "\013\ufffb\001\002\000\004\013\061\001\002\000\006\011" +
    "\ufffa\013\062\001\002\000\004\013\063\001\002\000\004" +
    "\013\064\001\002\000\004\013\065\001\002\000\004\013" +
    "\066\001\002\000\004\013\067\001\002\000\006\011\ufff9" +
    "\013\070\001\002\000\004\011\ufff8\001\002\000\004\002" +
    "\001\001\002\000\004\012\073\001\002\000\006\012\ufffc" +
    "\013\ufffc\001\002\000\010\011\ufff6\012\ufff6\014\ufff6\001" +
    "\002\000\010\011\ufff3\012\ufff3\014\ufff3\001\002\000\010" +
    "\011\ufff7\012\100\014\077\001\002\000\010\011\ufff1\012" +
    "\ufff1\014\ufff1\001\002\000\010\011\ufff2\012\ufff2\014\ufff2" +
    "\001\002\000\010\011\ufff4\012\ufff4\014\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\014\002\007\003\011\006\004\007\003\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\055\001\001\000\002\001\001\000\006\004\014" +
    "\010\013\001\001\000\004\010\051\001\001\000\004\010" +
    "\031\001\001\000\002\001\001\000\006\016\017\017\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\035\022\033\001\001\000\004\010\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\044\021\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\075\001\001\000\004" +
    "\015\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    
    map = new HashMap<String, ArrayList<Product>>();


 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Product>> map = new HashMap<String, ArrayList<Product>>();

    class Product{
        private Integer id;
        private String name;
        private Double cost;

        // costruttore
        Product(Integer id, String name, Double cost){
            this.name = name;
            this.id = id;
            this.cost = cost;
        }

        String getName(){
            return this.name;
        }

        Integer getId(){
            return this.id;
        }

        Double getCost(){
            return this.cost;
        }
    }

    // ERROR FUNCTION
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }

    // ritorna il valore del simbolo alla posizione = pos (dello stack)
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    public ArrayList<String[]> getPrice(String name, Integer perc, ArrayList<String[]> list){
        Double tot = 0.0;
        Integer n_prod = 0;

        ArrayList<Product> products = map.get(name);
        ArrayList<String[]> result = new ArrayList<String[]>();

        for (Product p: products){
            String[] strings = new String[3];
            for (String[] s: list) {
                if (p.getName().equals(s[0])){
                    Double tot_prod = p.getCost()*(Double.parseDouble(s[1]))*perc.doubleValue()/100.0;
                    strings[1] = tot_prod.toString();
                    strings[0] = p.getName();
                    strings[2] = s[1];
                }
            }
            result.add(strings);
        }

        return result;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP dresses SEP shopping 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= option1 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= option2 
            { parser.Tree.reduce(1,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // option1 ::= tok1_odd_min3 tok2_valid 
            { parser.Tree.reduce(2,"option1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1_odd_min3 ::= TOK1 TOK1 TOK1 
            { parser.Tree.reduce(3,"tok1_odd_min3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_odd_min3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1_odd_min3 ::= tok1_odd_min3 TOK1 TOK1 
            { parser.Tree.reduce(3,"tok1_odd_min3",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1_odd_min3",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok2_valid ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2_valid",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_valid",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2_valid ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(9,"tok2_valid",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_valid",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2_valid ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(10,"tok2_valid",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2_valid",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // option2 ::= TOK2 opt_second_tok2 tok13_sequence 
            { parser.Tree.reduce(3,"option2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // opt_second_tok2 ::= TOK2 
            { parser.Tree.reduce(1,"opt_second_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_second_tok2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // opt_second_tok2 ::= 
            { parser.Tree.reduce(0,"opt_second_tok2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_second_tok2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok13_sequence ::= tok13_sequence tok13_element 
            { parser.Tree.reduce(2,"tok13_sequence",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13_sequence",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok13_sequence ::= 
            { parser.Tree.reduce(0,"tok13_sequence",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13_sequence",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tok13_element ::= TOK1 
            { parser.Tree.reduce(1,"tok13_element",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tok13_element ::= TOK3 
            { parser.Tree.reduce(1,"tok13_element",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13_element",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dresses ::= dresses dress dress 
            { parser.Tree.reduce(3,"dresses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dresses ::= dress dress dress 
            { parser.Tree.reduce(3,"dresses",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dresses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dress ::= NAME MINUS prod_list SC 
            { parser.Tree.reduce(4,"dress",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Product> list = (ArrayList<Product>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(name, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dress",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prod_list ::= prod_list CM prod 
            { parser.Tree.reduce(3,"prod_list",0);
              ArrayList<Product> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Product> list = (ArrayList<Product>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Product p = (Product)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prod_list ::= prod 
            { parser.Tree.reduce(1,"prod_list",0);
              ArrayList<Product> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Product p = (Product)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<Product> list = new ArrayList();
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // prod ::= INT NAME COST EURO 
            { parser.Tree.reduce(4,"prod",0);
              Product RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer id = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double cost = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Product p = new Product(id, name, cost);
        RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // shopping ::= shopping purchase 
            { parser.Tree.reduce(2,"shopping",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shopping",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // shopping ::= purchase 
            { parser.Tree.reduce(1,"shopping",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("shopping",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // purchase ::= NAME INT PERC MINUS products SC 
            { parser.Tree.reduce(6,"purchase",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int percleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int percright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer perc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ArrayList<String[]> stampare = parser.getPrice(name, perc, list);
        System.out.println(name);
        Double tot = 0.0;
        Integer n_prod = 0;
        for (String[] el : stampare) {
            System.out.println("\"" + el[0] +"\"" + " " + el[1] + "euro");
            tot += Double.parseDouble(el[1]);
            n_prod += Integer.parseInt(el[2]);            
        }
        System.out.println("TOTAL: " + tot.toString() + "euro N_PROD: " + n_prod.toString());

              CUP$parser$result = parser.getSymbolFactory().newSymbol("purchase",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // products ::= products CM product 
            { parser.Tree.reduce(3,"products",0);
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] p = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("products",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // products ::= product 
            { parser.Tree.reduce(1,"products",0);
              ArrayList<String[]> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] p = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ArrayList<String[]> list = new ArrayList();
        list.add(p);
        RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("products",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // product ::= NAME INT 
            { parser.Tree.reduce(2,"product",0);
              String[] RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int qtyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qtyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer qty = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String[] prod = new String[2];
        prod[0] = name;
        prod[1] = qty.toString();
        RESULT = prod;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
