import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;


init with {:
    outputBuffer = new StringBuffer();
    // per salvare errori e warning richiesti
    errorBuffer = new StringBuffer();
:};


parser code {:
    // aggiunta la symbol table per il type checking
    HashMap<String, SymbolType> symbolType_table = new HashMap<String, SymbolType>();

    public int label = 0;

    public static String dumpOutput;

    public boolean enableSem = true;

    // numero di errori semantici
    public int semErrors = 0;
    // numero di warning semantici
    public int semWarnings = 0;
    // numero di warning sintattici
    public int synWarnings = 0;

    public StringBuffer outputBuffer;
    public StringBuffer errorBuffer; // aggiunto anche qua

    public int genLabel(){
        label++;
        return label;
    }
    
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }
:};


action code {:

    // classe usata per salvare le expressions e per il type checking su di esse
    class Expr {
        private String value;
        private SymbolType type;

        private SymbolType lookupSymbolType(String id){
            SymbolType type = parser.symbolType_table.get(id);
            if (type == null) {
                pSemError("Variable \"" + id + "\" not declared");
                return new SymbolType(-1, -1);
            }
            return type;
        }

        Expr(String value, SymbolType type) {
            this.value = value;
            this.type = type;
        }

        Expr(String id) {
            this.value = id;
            this.type = lookupSymbolType(id);
        }

        Expr(String id, Integer pos) {
            this.value = id + "[" + pos.toString()+ "]";
            this.type = lookupSymbolType(id);

            int dim = type.getDim();
            if(pos >= dim && dim != -1){
                pSemError("Array index (" + pos + ") exceed array size (" + dim ")");
            }
        }

        Expr(String value, String pos) {
            this.value = id + "[" + pos + "]";
            this.type = lookupSymbolType(id);
        }


        public String toString(){
            return value;
        }

        public SymbolType getSymbolType(){
            return type;
        }

        // controlla il SymbolType; torna unknown type se ho type_error
        public SymbolType checkSymbolType(Expr expr) {
            int type1 = type.getType();
            int type2 = expr.getSymbolType().getType();

            if (type1 == type2){
                return type;
            } else if (type1 != -1 && type2 != -1){
                // se operandi diversi, li casto a Double
                pSemWarning("Operation between int and double, int number casted to double");
                return new SymbolType(1,1);
            } else{
                // se errore (leggi sopra)
                return new SymbolType(-1,-1);
            }
        }

        public void checkSymbolTypeAssignment(Expr expr) {
            int type1 = type.getType();
            int type2 = expr.getSymbolType().getType();

            if (type1 == 0 && type2 == 1){
                pSemWarning("Assignment of a double value to an int variable");
            } else if(type1 == 1 && type2 == 0){
                pSemWarning("Assignment of an int value to a double variable");
            }
        }

    }

    private void disableSem() {
        parser.enableSem = false;
    }
    private boolean sem() {
        return parser.enableSem;
    }

    private void pSemError(String message){
        parser.errorBuffer.append("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message +"\n");
        parser.semErrors++;
    }
    private void pSemWarning(String message){
        parser.errorBuffer.append("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message +"\n");
        parser.semWarnings++;
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        System.err.println("Could not continue parsing");
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        parser.errorBuffer.append("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message+"\n");
        parser.synWarnings++;
        disableSem();       // se c'è errore sintattico continuo parsing, ma disabilito semantica
    }

    private void dump(String s){
        parser.outputBuffer.append(s);
    }
    private void dumpln(String s){
        parser.outputBuffer.append(s+"\n");
    } 
:}


// Terminal tokens
terminal Integer INT;
terminal Double DOUBLE;

terminal PRINT, IF, WHILE, THEN, ELSE;
terminal String ID;
terminal RO, RC, BO, BC, S, CM, SO, SC;
terminal PLUS, MINUS, STAR, DIV;
terminal MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
terminal AND, OR, NOT;
terminal INT_TYPE, DOUBLE_TYPE;
terminal UMINUS, LOWER_THAN_ELSE;


// Non terminal tokens
non terminal prog, stmt_list, stmt, assignment, print, while;
non terminal Expr exp;
non terminal mineq, majeq;
non terminal Integer[] nt0_while;
non terminal Integer nt0_if, nt1_if;

non terminal decl_list, decl, var_list, var;
non terminal String type, array;
non terminal String if_condition, while_condition;
non terminal Expr id;

non terminal matched_stmt, unmatched_stmt;

// Precedences and associativities
// lower precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ, EQ;
precedence left PLUS, MINUS;
precedence left STAR, DIV;
precedence left UMINUS;
// aggiunta per evitare il dangling else (dare priorità allo shift sull'ELSE)
precedence nonassoc LOWER_THAN_ELSE;
precedence nonassoc ELSE;
// higher precedences


//////////////////////////////////////
// Grammar start
//////////////////////////////////////

start with prog;


prog ::= decl_list stmt_list {:
            if (sem() && parser.semErrors == 0){
                dumpln("\tEND");
                if (parser.dumpOutput.equals("stdout")){
                    System.out.println(parser.outputBuffer);
                }
                else {
                    try {
                        BufferedWriter out = new BufferedWriter(new FileWriter(parser.dumpOutput));
                        String outText = parser.outputBuffer.toString();
                        out.write(outText);
                        out.close();
                    }
                    catch (IOException e){
                        e.printStackTrace();
                    }
                }
            } else {
                System.err.println("\n OUTPUT COULD NOT BE PRODUCED DUE TO ERRORS\n");
            }
            System.err.println(parser.errorBuffer);
            
            System.err.println("######################");
            System.err.println("Syntactic Errors: " + parser.synWarnings);
            System.err.println("Semantic Errors: " + parser.semErrors);
            System.err.println("Semantic Warnings: " + parser.semWarnings);
:}
;


//////////////////////////////////////
// Declarations
//////////////////////////////////////

decl_list ::= decl_list decl |
;

decl ::= type var_list S
    | type error S {: pSynWarning("Error in declaration"); :}
;

type ::= INT_TYPE {: if(sem()) {RESULT = new String("INT");} :}
        | DOUBLE_TYPE {: if(sem()) {RESULT = new String("DOUBLE");} :}
;

var_list ::= var 
    | var_list CM {: if(sem()) {RESULT = parser.stack(-2);} :} var
;

var ::= ID:x {: if(sem()) {
        dumpln("\t" + parser.stack(-1) + " " + x);
        if(parser.stack(-1).equals("INT")) {
            parser.symbolType_table.put(x, new SymbolType(0,1));
        } else if(parser.stack(-1).equals("DOUBLE")){
            parser.symbolType_table.put(x, new SymbolType(1,1));
        }
    }

    | ID:x SO INT:y SC {: if(sem()) {
        dumpln("\t" + parser.stack(-4) + " " + x + "[" + y.toString() + "]");
        if(parser.stack(-4).equals("INT")) {
            parser.symbolType_table.put(x, new SymbolType(0,y));
        } else if(parser.stack(-4).equals("DOUBLE")){
            parser.symbolType_table.put(x, new SymbolType(1,y));
        }
    }
:}
;


//////////////////////////////////////
// Instructions
//////////////////////////////////////

stmt_list ::= stmt_list stmt | stmt 
            | error stmt {: pSynWarning("Error in statement"); :}
;


// modificata per conflitti
stmt ::= matched_stmt | unmatched_stmt
    | BO stmt_list error BC {: pSynWarning("Missing ; before }"); :}
    | BO error BC {: pSynWarning("Missing ; before }"); :}
    | error S {: pSynWarning("Error in statement"); :}
;

// matched_stmt: tutte le istruzioni tranne gli if unmatched
matched_stmt ::= IF if_condition nt0_if matched_stmt ELSE nt1_if matched_stmt {:
                    if (sem()) {dump("L" + parser.stack(-1) + ":");}
                :}
              | while
              | assignment
              | print
              | BO stmt_list BC
;

// unmatched_stmt: solo gli if senza else o annidati
unmatched_stmt ::= IF if_condition nt0_if matched_stmt {: if (sem()) {dump("L" + parser.stack(-1) + ":");} :} %prec LOWER_THAN_ELSE
                 | IF if_condition nt0_if unmatched_stmt ELSE nt1_if matched_stmt {: if (sem()) {dump("L" + parser.stack(-1) + ":");} :}
;

// Assignment instruction
assignment ::= id:x S {: if (sem()) {dumpln("\t" + x);} :}
    | id:x EQ exp:y S {: if (sem()) {
        x.checkSymbolTypeAssignment(y);
        dumpln("\tEVAL " + y.toString() + "\n\tASS " + x);
        } :}
    | id EQ error S {: pSynWarning("Error in expression"); :}
    | error EQ exp S {: pSynWarning("Error in assigment"); :}
;


// PRINT instruction
print ::= PRINT id:x S {: if (sem()) {dumpln("\tPRINT " + x);} :}
          | PRINT error S {: pSynWarning("Error in 'print' instruction"); :}
;


// IF instruction (RIMOSSA PER EVITARE IL CONFLITTO)
//if ::= IF if_condition nt0_if stmt ELSE nt1_if stmt {:
//                                if (sem()) {dump("L" + parser.stack(-1) + ":");}
//        :}
//     | IF if_condition:e nt0_if stmt {:
//                                if (sem()) {dump("L" + parser.stack(-1) + ":");}
//        :}
//     | IF if_condition:e nt0_if stmt error nt1_if stmt {: pSynWarning("Error 'else' expected in 'if' instruction"); :}
//;

if_condition ::= RO exp:e RC {: RESULT = (String)e; :}
    | RO error RC {: pSynWarning("Error in 'if' condition"); :}
    | error exp RC {: pSynWarning("Error '(' expected in 'if' instruciton"); :}
    | RO exp error  {: pSynWarning("Error ')' expected in 'if' instruciton"); :}
;

nt0_if ::= {:
        if (sem()) {
            RESULT = parser.genLabel();
            dumpln("\tEVAL " + parser.stack(0) + "\t\t/* if (line " + parser.getLine() + ") */\n\tGOTOF L" + RESULT);
        }
:}
;

nt1_if ::= {:
        if (sem()) {
            RESULT = parser.genLabel();
            dumpln("\tGOTO L" + RESULT);
            dump("L" + parser.stack(-2) + ":");
        }
:}
;

// WHILE instruction
while ::= WHILE while_condition nt0_while stmt {:
                    if (sem()) {
                        Integer[] l = (Integer[])parser.stack(-1);
                        dumpln("\tGOTO L" + l[0]);
                        dump("L" + l[1] + ":");
                    }
:}
;

while_condition ::= RO exp:e RC {: if(sem()) {RESULT = e.value;} :}
    | RO error RC {: pSynWarning("Error in 'while' condition"); :}
    | error exp RC {: pSynWarning("Error '(' expected in 'while' instruciton"); :}
    | RO exp error  {: pSynWarning("Error ')' expected in 'while' instruciton"); :}
;

nt0_while ::= {:
        if (sem()) {
            RESULT = new Integer[2];
            RESULT[0] = (Integer)parser.genLabel();
            RESULT[1] = (Integer)parser.genLabel();
            dumpln("L" + RESULT[0] + ":\tEVAL " + parser.stack(0) + "\t\t/* while (line " + parser.getLine() + ") */\n\tGOTOF L" + RESULT[1]);
        }
:}
;


// Expressions
exp ::= 
    /* Logical expressions */
    exp:x AND exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " & ",  x.
        checkSymbolType(y));} :}
    | exp:x OR exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " | ", x.
        checkSymbolType(y));} :}
    | NOT exp:x {: if(sem()) {RESULT = new Expr(x + " ! ", x.getSymbolType());} :}

    /* Comparison expressions */
    | exp:x EQ EQ exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " == ",  x.
        checkSymbolType(y));} :}
    | exp:x MIN exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " < ",  x.
        checkSymbolType(y));} :}
    | exp:x MAJ exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " > ",  x.
        checkSymbolType(y));} :}
    | exp:x mineq exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " <= ",  x.
        checkSymbolType(y));} :}
    | exp:x majeq exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " >= ",  x.
        checkSymbolType(y));} :}

    /* Arithmetic expression */
    | exp:x PLUS exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " + ",  x.
        checkSymbolType(y));} :}
    | exp:x MINUS exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " - ",  x.
        checkSymbolType(y));} :}
    | exp:x STAR exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " * ",  x.
        checkSymbolType(y));} :}
    | exp:x DIV exp:y {: if(sem()) {RESULT = new Expr(x + " " + y + " / ",  x.
        checkSymbolType(y));} :}
    | RO exp:x RC {: if(sem()) {RESULT = x;} :}
    | id:x {: if(sem()) {RESULT = x;} :}
    | INT:x {: if(sem()) {RESULT = new Expr(x.toString(), new SymbolType(0,1));} :}
    | DOUBLE:x {: if(sem()) {RESULT = new Expr(x.toString(), new SymbolType(1,1));} :}
    | MINUS INT:x {: if(sem()) {RESULT = new Expr("-" + x.toString(), new SymbolType(0,1));} :} %prec UMINUS
    | MINUS DOUBLE:x {: if(sem()) {RESULT = new Expr("-" + x.toString(), new SymbolType(1,1));} :} %prec UMINUS
    | RO error RC {: pSynWarning("Error in expression"); :}
;


mineq ::= MIN_EQ | EQ_MIN;
majeq ::= MAJ_EQ | EQ_MAJ;


id ::= ID:x {: if(sem()) {RESULT = new Expr(x);} :}
      |ID:x SO INT:y SC {: if(sem()){RESULT = new Expr(x, y);} :}
      |ID:x SO ID:y SC {: if(sem()){RESULT = new Expr(x, y);} :}
      | error SC {: pSynWarning("Error in vector"); :}
;
