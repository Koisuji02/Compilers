
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\015\003\000\002\014" +
    "\004\000\002\014\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\003\004\000" +
    "\002\006\003\000\002\006\003\000\002\013\005\000\002" +
    "\013\003\000\002\005\005\000\002\005\003\000\002\004" +
    "\005\000\002\004\003\000\002\012\003\000\002\007\005" +
    "\000\002\010\006\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\010\004\014\005\011\007\016\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\007\ufffe\001\002\000\012" +
    "\002\ufffc\004\ufffc\005\ufffc\007\ufffc\001\002\000\012\002" +
    "\000\004\014\005\011\007\016\001\002\000\006\005\011" +
    "\006\033\001\002\000\004\002\031\001\002\000\014\010" +
    "\ufff3\011\ufff3\012\030\013\ufff3\014\ufff3\001\002\000\012" +
    "\002\ufffa\004\ufffa\005\ufffa\007\ufffa\001\002\000\006\010" +
    "\024\011\025\001\002\000\012\002\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\007" +
    "\ufffb\001\002\000\004\005\011\001\002\000\006\011\ufff5" +
    "\014\ufff5\001\002\000\006\011\022\014\021\001\002\000" +
    "\004\005\011\001\002\000\012\002\uffef\004\uffef\005\uffef" +
    "\007\uffef\001\002\000\006\011\ufff6\014\ufff6\001\002\000" +
    "\004\005\011\001\002\000\012\002\uffed\004\uffed\005\uffed" +
    "\007\uffed\001\002\000\006\011\027\014\021\001\002\000" +
    "\012\002\uffee\004\uffee\005\uffee\007\uffee\001\002\000\006" +
    "\005\ufff9\006\ufff9\001\002\000\004\002\001\001\002\000" +
    "\006\013\ufff8\014\ufff8\001\002\000\006\013\ufff7\014\ufff7" +
    "\001\002\000\006\013\ufff1\014\ufff1\001\002\000\006\013" +
    "\037\014\040\001\002\000\006\013\ufff0\014\ufff0\001\002" +
    "\000\012\010\ufff4\011\ufff4\013\ufff4\014\ufff4\001\002\000" +
    "\006\005\011\006\033\001\002\000\006\013\ufff2\014\ufff2" +
    "\001\002\000\012\002\uffff\004\uffff\005\uffff\007\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\022\002\003\003\006\005\012\007\004\010" +
    "\011\011\014\014\005\015\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\002\041\003\006\005\012\007" +
    "\004\010\011\011\014\001\001\000\014\003\006\004\034" +
    "\005\031\006\035\012\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\006\005\016\013" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\006\005\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\006\005\016\013\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\006\005\031\006\035\012\040" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public void report_error(String message, Object info){
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol){
            if(((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): "+message);
            } else {
                System.err.print(": "+message);
            }
        }
        else {
            System.err.print(": "+message);
        }
    }
    public void syntax_error(Symbol s){
        report_error("Syntax error", s);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= program_list 
            { parser.Tree.reduce(1,"prog",0);
              Object RESULT =null;
		 System.out.println("Success!!!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_list ::= program_list elem 
            { parser.Tree.reduce(2,"program_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_list ::= elem 
            { parser.Tree.reduce(1,"program_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= COMMENT 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= interrogation 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elem ::= fact 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elem ::= rule 
            { parser.Tree.reduce(1,"elem",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elem",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // functor ::= ATOM RO 
            { parser.Tree.reduce(2,"functor",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functor",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argument ::= VAR 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_predicates ::= list_predicates COM predicate 
            { parser.Tree.reduce(3,"list_predicates",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_predicates",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_predicates ::= predicate 
            { parser.Tree.reduce(1,"list_predicates",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_predicates",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicate ::= functor predicate_list RC 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicate ::= ATOM 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate_list ::= predicate_list COM el_predicate 
            { parser.Tree.reduce(3,"predicate_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicate_list ::= el_predicate 
            { parser.Tree.reduce(1,"predicate_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // el_predicate ::= argument 
            { parser.Tree.reduce(1,"el_predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("el_predicate",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // interrogation ::= IS list_predicates DOT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("interrogation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rule ::= predicate RS list_predicates DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
