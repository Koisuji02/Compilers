import java_cup.runtime.*;

// PARSER CODE (error reports)
parser code {:
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
:};

// TERMINAL SYMBOLS
terminal PLUS, MINUS, STAR, DASH, EQUAL, MINOR, MAJOR, SEMICOLON, DOT, COMMA;
terminal SQUARE_OPEN, SQUARE_CLOSE, ROUND_OPEN, ROUND_CLOSE, BRACE_OPEN, BRACE_CLOSE;
terminal AND, OR, NOT, EQ, LEQ, GEQ, NEQ;
terminal INT_TYPE, DOUBLE_TYPE, IF, ELSE, WHILE, PRINT;
terminal INT, DOUBLE, ID;
terminal LOWER_THAN_ELSE;

// NON-TERMINAL SYMBOLS
non terminal program, declaration_list, statement_list, statement, expression, declaration, id_list, assignment;

// PRECEDENCE RULES
precedence left OR;
precedence left AND;
precedence left EQ, NEQ;
precedence left LEQ, GEQ, MINOR, MAJOR;
precedence left PLUS, MINUS;
precedence left STAR, DASH;
precedence right NOT;
precedence nonassoc LOWER_THAN_ELSE;
precedence nonassoc ELSE;


// GRAMMAR DEFINITION

// Le regole con error devono essere posizionate dopo le regole corrette per evitare conflitti

start with program;

program ::= declaration_list statement_list {: System.out.println("Success!!!"); :};

declaration_list ::= /* empty */ 
					| declaration_list declaration;

declaration ::= INT_TYPE id_list SEMICOLON
					| DOUBLE_TYPE id_list SEMICOLON

					// Errori nelle dichiarazioni
					| INT_TYPE error SEMICOLON
                		{: System.err.println("ERROR: Error in declaration (linea " + ((Symbol) $2).left + ")"); :}
					| DOUBLE_TYPE error SEMICOLON
                		{: System.err.println("ERROR: Error in declaration (linea " + ((Symbol) $2).left + ")"); :};

id_list ::= ID
			| ID SQUARE_OPEN INT SQUARE_CLOSE
			| id_list COMMA ID SQUARE_OPEN INT SQUARE_CLOSE
			| id_list COMMA ID;

statement_list ::= /* empty */
					| statement_list statement;

statement ::= assignment SEMICOLON
			| PRINT ROUND_OPEN ID ROUND_CLOSE SEMICOLON
			| PRINT ROUND_OPEN ID SQUARE_OPEN expression SQUARE_CLOSE ROUND_CLOSE SEMICOLON
			| WHILE ROUND_OPEN expression ROUND_CLOSE statement
			| IF ROUND_OPEN expression ROUND_CLOSE statement %prec LOWER_THAN_ELSE
			| IF ROUND_OPEN expression ROUND_CLOSE statement ELSE statement
			| BRACE_OPEN statement_list BRACE_CLOSE
			// mancanza di ";" prima di "}"
			| PRINT ROUND_OPEN ID ROUND_CLOSE error BRACE_CLOSE
			| PRINT ROUND_OPEN ID SQUARE_OPEN expression SQUARE_CLOSE ROUND_CLOSE error BRACE_CLOSE
			// errore nella print
			| PRINT ROUND_OPEN error ROUND_CLOSE SEMICOLON
                {: System.err.println("ERROR: Error in 'print' instruction (linea " + ((Symbol) $3).left + ")"); :}
			// errore else mancante in if
			| IF ROUND_OPEN expression ROUND_CLOSE statement error
                {: System.err.println("ERROR: 'else' expected in 'if' instruction (linea " + ((Symbol) $6).left + ")"); :}
			// errore condizione di if
			| IF ROUND_OPEN error ROUND_CLOSE statement
                {: System.err.println("ERROR: Error in 'if' condition (linea " + ((Symbol) $3).left + ")"); :}
			// errore "(" o ")" mancante in if
			| IF error expression ROUND_CLOSE statement
                {: System.err.println("ERROR: '(' expected in 'if' instruction (linea " + ((Symbol) $2).left + ")"); :}
            | IF ROUND_OPEN expression error statement
                {: System.err.println("ERROR: ')' expected in 'if' instruction (linea " + ((Symbol) $4).left + ")"); :}
			// errore nel while
			| WHILE ROUND_OPEN error ROUND_CLOSE statement
                {: System.err.println("ERROR: Error in 'while' condition (linea " + ((Symbol) $3).left + ")"); :}
			// errore "(" o ")" mancante nel while
			|WHILE error expression ROUND_CLOSE statement
                {: System.err.println("ERROR: '(' expected in 'while' instruction (linea " + ((Symbol) $2).left + ")"); :}
            | WHILE ROUND_OPEN expression error statement
                {: System.err.println("ERROR: ')' expected in 'while' instruction (linea " + ((Symbol) $4).left + ")"); :}
			// errore generico
			| error
                {: System.err.println("ERROR: Error in statement (linea " + ((Symbol) $1).left + ")"); :};

assignment ::= ID EQUAL expression
			| ID SQUARE_OPEN expression SQUARE_CLOSE EQUAL expression
			// errore assegnazione
			| ID EQUAL error
                {: System.err.println("ERROR: Error in assignment (linea " + ((Symbol) $3).left + ")"); :};

expression ::= INT
			| DOUBLE
			| ID
			| ID SQUARE_OPEN expression SQUARE_CLOSE
			| expression PLUS expression
			| expression MINUS expression
			| expression STAR expression
			| expression DASH expression
			| expression EQ expression
			| expression LEQ expression
			| expression GEQ expression
			| expression NEQ expression
			| expression AND expression
			| expression OR expression
			| expression MAJOR expression
			| expression MINOR expression
			| NOT expression
			| MINUS expression
			| ROUND_OPEN expression ROUND_CLOSE
			// errori nelle espressioni
			| expression PLUS error
                {: System.err.println("ERROR: Error in expression (linea " + ((Symbol) $3).left + ")"); :}
			|expression MINUS error
                {: System.err.println("ERROR: Error in expression (linea " + ((Symbol) $3).left + ")"); :}
			// errore vettore
			| ID SQUARE_OPEN error SQUARE_CLOSE
                {: System.err.println("ERROR: Error in vector access (linea " + ((Symbol) $3).left + ")"); :};